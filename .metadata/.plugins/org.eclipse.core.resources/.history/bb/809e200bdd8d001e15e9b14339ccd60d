package BinarySearch;

import java.util.Stack;

public class BinarySearchImpl implements BinarySearch {
	private BSTNode root;

	BinarySearchImpl() {
		root = null;
	}

	@Override
	public void search(int n) {
		BSTNode current = root;
		while (current != null) {
			if (current.getData() == n) {
				System.out.println("Element Found..");
				return;
			}
			if (n < current.getData()) {
				current = current.getlChild();
			} else {
				current = current.getrChild();
			}
		}
		System.out.println("Element Not Found..");

	}

	@Override
	public void insert(int n) {
		BSTNode node = new BSTNode();
		node.setData(n);
		node.setlChild(null);
		node.setrChild(null);
		if (root == null) {
			root = node;
			return;
		}
		BSTNode current = root;
		BSTNode parent = null;
		while (current != null) {
			parent = current;
			if (n < current.getData()) {
				current = current.getlChild();
			} else {
				current = current.getrChild();
			}
		}
		if (n < parent.getData()) {
			parent.setlChild(node);
		} else {
			parent.setrChild(node);

		}
	}

	@Override
	public void print() {
		BSTNode current = root;
		if (current == null) {
			return;
		}
		Stack< BSTNode> treeStack=new Stack<BSTNode>();
		while (current != null||!treeStack.isEmpty()) {
			if(current!=null) {
				System.out.print(current.getData()+" ");
				treeStack.push(current);
				current=current.getlChild();
			}else {
				current=current.getrChild();
			}
			
		}
	}

}
